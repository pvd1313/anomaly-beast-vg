debug = true

local nvg_radius = 0.5 -- Radius of circles.

-- Variables
local nvg_generation = 0         -- 1, 2, or 3.
local nvg_num_tubes = 0          -- 1, 2, or 4 tubes -- 11 for single offset left and 12 for single offset right.
local nvg_gain_current = 1       -- Current gain setting.
local gain_directionality = true -- Directionality of brightness adjust.
local vignette_amount = 0.05     -- Standard vignette value.
local vignette_current = 1.0     -- Current vignette value, for turn-on/ turn-off effect.
local vignette_speed = 1.4       -- How fast vignette changes.
local glitch_power = 0           -- How much 'glitch' to add to NVGs.
local nvg_mode = 0               -- Overlay preset.
local crt_latch = false          -- Latches crt effect on turn-on.
local flip_latch = false         -- Latches flip down effect on turn-on.
local flip_speed = 1.4           -- How fast to flip down.
local flip_down = 1              -- Flip down value (1 all the way up, 100 all the way down).

-- Configs (v.fuchadzhy failed to add it to LTX, thats why it is here, hard-coded).
-- Also maybe there is way to detect scope type at runtime.
local nvg_heat_scope_names = {
    ["1pn93n2_1gs"] = true,
    ["t12"] = true,
    ["gauss_sight"] = true,
}
local nvg_night_scope_names = {
    ["1pn93"] = true,
    ["pn23"] = true,
    ["vulkan"] = true,
}
local nvg_binoc_names = {
    ["wpn_binoc_inv"] = true,
}

-- Variables for on-weapon zoom.
local nvg_blocker_scope = false
local zoom = true

-- Variables for auto-turn-off functionality.
local nvg_blocker_pda = false

-- Variables to store the effect.
local nv_eff = {
    ["nightvision_1"] = {
        nvg_generation = 1,
        nvg_num_tubes = 1.0,
        nvg_mode = 3.0
    },
    ["nightvision_2"] = {
        nvg_generation = 2,
        nvg_num_tubes = 2.0,
        nvg_mode = 0.0
    },
    ["nightvision_3"] = {
        nvg_generation = 3,
        nvg_num_tubes = 4.0,
        nvg_mode = 0.0
    }
}

-----------------------------------------------------------------------------
--        NVG DATA PACKING AND UPDATE FUNCTION
-----------------------------------------------------------------------------

function pack_nvg_data()
    local x_1 = tostring(nvg_generation)                      -- Generation (1,2,3) - outputs 1.x to 3.x
    local x_2 = tostring(nvg_num_tubes * 10)                  -- Num Tubes (1,2,4,1.1,1.2) outputs x.10, x.20, x.40, x.11, or x.12
    local y_1 = tostring(math.floor(nvg_gain_current * 10))   -- Gain Adjust (0.1 to 3) -- outputs 1.y to 30.y in 1. increment.
    local y_2 = tostring(math.floor(bvg_cfg.washout_thresh * 10)) -- Washout Thresh (0.0 - 0.9) - outputs y.0 to y.9 in .1 increment.
    local z_1 = tostring(math.floor(vignette_current * 100))  -- Vignette Amount (0.0 to 1.0) outputs 0.z to 100.z in 1. increment.
    local z_2 = tostring(math.floor(glitch_power * 10))       -- Glitch Power (0.0 - 0.9) - outputs z.0 to z.9 in .1 increment.
    local w_1 = tostring((math.floor(bvg_cfg.gain_offset * 10)))  -- Gain Offset (0.5 to 3.0) - outputs 5.w to 30.w in 1. increment.
    local w_2 = tostring(nvg_mode)                            -- Mode (0,1) - outputs w.0 or w.1 depending on mode.

    return "(" ..
    x_1 .. "." .. x_2 .. "," .. y_1 .. "." .. y_2 .. "," .. z_1 .. "." .. z_2 .. "," .. w_1 .. "." .. w_2 .. ")"
end

function pack_nvg_data_2()
    local x_1 = tostring(math.floor(flip_down)) -- Flip down amount - outputs 1.x to 100.x
    local x_2 = tostring(0)
    local y_1 = tostring(0)
    local y_2 = tostring(math.floor(nvg_radius * 10)) -- Radius for NVG effect - outputs 0.0 to 0.9
    local z_1 = tostring(0)
    local z_2 = tostring(0)
    local w_1 = tostring(0)
    local w_2 = tostring(0)

    return "(" ..
    x_1 .. "." .. x_2 .. "," .. y_1 .. "." .. y_2 .. "," .. z_1 .. "." .. z_2 .. "," .. w_1 .. "." .. w_2 .. ")"
end

function console_update_nvg_shader()
    get_console():execute("r__nightvision " .. nvg_generation)
    get_console():execute("shader_param_8 " .. pack_nvg_data())
    get_console():execute("shader_param_7 " .. pack_nvg_data_2())
end

function console_disable_nvg_shader()
    get_console():execute("r__nightvision 0")
    get_console():execute("shader_param_8 (0,0,0,0)")
end

-----------------------------------------------------------------------------
--        NVG TURN ON AND TURN OFF FUNCTIONS, INCL ANIMATION
-----------------------------------------------------------------------------

function check_animation_allowed()
    return (bvg_anim.torch_state == 0 and (not game.only_movekeys_allowed()) and (not IsMoveState("mcClimb")))
end

item_device.set_nightvision = function(section, state)
    if (bvg_cfg.enable_torch_animation and z_beefs_nvgs.play_animation) then
        z_beefs_nvgs.play_animation = false
        set_nightvision_animated(section, state)
        return
    end

    if (not section) then return end

    local nv_settings = nv_eff[ini_sys:r_string_ex(section, "nv_effect")]

    if (nv_settings) then
        nvg_generation = nv_settings.nvg_generation
        nvg_num_tubes = nv_settings.nvg_num_tubes
        nvg_mode = nv_settings.nvg_mode

        if (state and (not item_device.nv_state)) then
            console_update_nvg_shader()
            bvg_sfx.play(bvg_sfx_id.vision_start)
            item_device.nv_state = true
            set_actor_callback_registered(true)

        elseif ((not state) and item_device.nv_state) then
            console_disable_nvg_shader()
            crt_latch = false
            flip_latch = false
            vignette_current = 1.0
            flip_down = 1
            nvg_radius = 0.5 -- Hack to fix not correctly going back until i am better at this shit
            bvg_sfx.play(bvg_sfx_id.vision_finish)
            item_device.nv_state = false
            set_actor_callback_registered(false)
        end
    end
end

function set_actor_callback_registered(state)
    if (state) then
        RegisterScriptCallback("actor_on_update", actor_on_update)
        RegisterScriptCallback("actor_on_weapon_zoom_in", actor_on_weapon_zoom_in)
        RegisterScriptCallback("actor_on_weapon_zoom_out", actor_on_weapon_zoom_out)
        RegisterScriptCallback("actor_on_info_callback", actor_on_info_callback)
    else
        UnregisterScriptCallback("actor_on_weapon_zoom_in", actor_on_weapon_zoom_in)
        UnregisterScriptCallback("actor_on_weapon_zoom_out", actor_on_weapon_zoom_out)
        UnregisterScriptCallback("actor_on_info_callback", actor_on_info_callback)
        UnregisterScriptCallback("actor_on_update", actor_on_update)
    end
end

function set_nightvision_animated(section, state)
    if (not section) then return end
    if (not ini_sys:r_string_ex(section, "nv_effect")) then return end
    if (not check_animation_allowed()) or (not item_device.can_toggle_torch()) then return end
    if (lam2.get_action_with_tag("nvg_animation")) then return end

    bvg_anim.torch_state = 1
    local weapon_zoomed = bvg_util.check_weapon_zoomed() and (not (IsPistol(db.actor:active_item(), nil)) or db.actor:active_detector())
    local det_active = db.actor:active_detector() or nil

    -- If holding weapon and aiming disable ADS.
    if (db.actor:active_item() and (not det_active and weapon_zoomed)) then
        if (get_console():get_bool("wpn_aim_toggle")) then
            level.press_action(bind_to_dik(key_bindings.kWPN_ZOOM))
        else
            level.release_action(bind_to_dik(key_bindings.kWPN_ZOOM))
        end
    end

    if (state) then
        -- Enable NVG.
        lam2.add_action(lam2.get_template_action_wait_for_seconds(0.05))  -- Anim bug? small delay to prevent ctd.
        lam2.add_action(bvg_anim.get_template_action_nvg_enable_start())  -- Enter hand motion.
        lam2.add_action(bvg_anim.get_template_action_nvg_enable(section)) -- Equip nvg motion.
    else
        -- Disable NVG
        lam2.add_action(bvg_anim.get_template_action_nvg_disable_start())  -- Fade in.
        lam2.add_action(bvg_anim.get_template_action_nvg_disable(section)) -- Unequip NVG motion.
        lam2.add_action(lam2.get_template_action_wait_for_seconds(0.05))   -- Anim bug? Small delay to prevent ctd.
        lam2.add_action(bvg_anim.get_template_action_nvg_disable_end())    -- Exit hand motion.
    end
end

function brightness_adjust()
    if ((not item_device.nv_state) or (check_nvg_blocked())) then
        return
    end

    local step_size = (bvg_cfg.gain_max - bvg_cfg.gain_min) / 3
    if (gain_directionality and nvg_gain_current <= bvg_cfg.gain_max) then
        nvg_gain_current = nvg_gain_current + step_size
        if (nvg_gain_current >= bvg_cfg.gain_max) then
            nvg_gain_current = bvg_cfg.gain_max
            gain_directionality = not gain_directionality
        end

    elseif (not gain_directionality and nvg_gain_current >= bvg_cfg.gain_min) then
        nvg_gain_current = nvg_gain_current - step_size
        if (nvg_gain_current <= bvg_cfg.gain_min) then
            nvg_gain_current = bvg_cfg.gain_min
            gain_directionality = not gain_directionality
        end
    end

    bvg_sfx.play(bvg_sfx_id.brightness_adjust)

    console_update_nvg_shader()
end

-----------------------------------------------------------------------------
--        NVG STATE CHANGE EFFECT, MANIPULATES VIGNETTE AND LOCATION TO
--            SIMUALATE FLIPPING DOWN AND TURNING ON NVGS
-----------------------------------------------------------------------------

function state_change_effect()
    if (not flip_latch and item_device.nv_state) then
        if (flip_down < 100) then
            flip_down = flip_down * flip_speed
        end

        if (flip_down >= 100) then
            flip_down = 100
            flip_latch = true
        end
    end

    if (flip_latch and not crt_latch and item_device.nv_state) then
        if (vignette_current > vignette_amount) then
            vignette_current = vignette_current * (1 / vignette_speed)
        end

        if (vignette_current <= vignette_amount) then
            vignette_current = vignette_amount
            crt_latch = true
        end
    end
end

-- NVG glitch effect during blowouts and psy storms.
function set_glitch_power(power)
    if (item_device.nv_state and glitch_power ~= power) then
        glitch_power = power
        if (not check_nvg_blocked()) then
            console_update_nvg_shader()
        end
    end
end

function check_nvg_blocked()
    nvg_blocker_scope = check_active_weapon_restricts_nvg()

    return (nvg_blocker_pda or nvg_blocker_scope)
end

function update_weapon_zoom_in()
    if (not item_device.nv_state) then return end

    local active_scope_restricts_nvg = check_active_weapon_restricts_nvg()

    if (active_scope_restricts_nvg) then
        nvg_blocker_scope = true
        console_disable_nvg_shader()

    elseif (not active_scope_restricts_nvg and nvg_blocker_scope) then
        nvg_blocker_scope = false
        console_update_nvg_shader()

    end
end

function check_active_weapon_restricts_nvg()
    if (bvg_util.check_weapon_zoomed()) then return false end

    if (not bvg_cfg.view_through_scope) then return true end

    local scope_name = bvg_util.try_get_active_scope_name()
    if (not scope_name) then return false end

    if (bvg_cfg.off_when_hv_scope and nvg_heat_scope_names[scope_name]) then
        return true
    end

    if (bvg_cfg.off_when_nv_scope and nvg_night_scope_names[scope_name]) then
        return true
    end

    if (bvg_cfg.off_when_binoc and nvg_binoc_names[scope_name]) then
        return true
    end

    return false
end

-----------------------------------------------------------------------------
--        Callbacks
-----------------------------------------------------------------------------

function on_game_start()
    RegisterScriptCallback("on_option_change", bvg_mcm.fetch_config)

    bvg_mcm.fetch_config()
end

function actor_on_weapon_zoom_in()
    zoom = true
    wpn_zoom_type = bvg_util.try_get_active_weapon_zoom_type()
    update_weapon_zoom_in()
end

function actor_on_weapon_zoom_out()
    zoom = false

    if (not item_device.nv_state) then return end

    if (nvg_blocker_scope) then
        nvg_blocker_scope = false
        console_update_nvg_shader()
    end
end

function actor_on_info_callback(npc, info_id)
    local actor = db.actor

    if (actor and item_device.nv_state) then
        if (info_id == "ui_pda" and not bvg_cfg.stays_pda) then
            if (not nvg_blocker_pda) then
                console_disable_nvg_shader()
                nvg_blocker_pda = true
            end
        elseif (info_id == "ui_pda_hide" and not bvg_cfg.stays_pda) then
            if (nvg_blocker_pda) then
                console_update_nvg_shader()
                nvg_blocker_pda = false
            end
        end
    end
end

local tmr = 0
local tmr_step = 200
local wpn_zoom_type = -1

function actor_on_update()
    if ((not crt_latch or not flip_latch) and (item_device.nv_state)) then
        state_change_effect()
        console_update_nvg_shader()
    end

    tg = time_global()
    if tg < tmr then return end
    tmr = tg + tmr_step

    if (zoom) then
        local new_zoom_type = bvg_util.try_get_active_weapon_zoom_type()
        if (new_zoom_type ~= wpn_zoom_type) then
            wpn_zoom_type = new_zoom_type
            update_weapon_zoom_in()
            end
    end

    if ((not zoom) and (item_device.nv_state) and (nvg_blocker_scope)) then
        -- check for disable NVG while ADS
        if (nvg_blocker_scope and check_active_weapon_restricts_nvg()) then
            nvg_blocker_scope = false
            console_update_nvg_shader()
        end
    end
end