debug_enabled = false

-- Configs (v.fuchadzhy failed to add it to LTX, thats why it is here, hard-coded).
-- Also maybe there is way to detect scope type at runtime.
local nvg_heat_scope_names = {
    ["1pn93n2_1gs"] = true,
    ["t12"] = true,
    ["gauss_sight"] = true,
}
local nvg_night_scope_names = {
    ["1pn93"] = true,
    ["pn23"] = true,
    ["vulkan"] = true,
}
local nvg_binoc_names = {
    ["wpn_binoc_inv"] = true,
}

-- Variables for on-weapon zoom.
local nvg_blocker_scope = false
local nvg_blocker_pda = false

-----------------------------------------------------------------------------
--        NVG DATA PACKING AND UPDATE FUNCTION
-----------------------------------------------------------------------------

function pack_nvg_data()
    local x_1 = tostring(bvg_var.generation)                      -- Generation (1,2,3) - outputs 1.x to 3.x
    local x_2 = tostring(bvg_var.num_tubes * 10)                  -- Num Tubes (1,2,4,1.1,1.2) outputs x.10, x.20, x.40, x.11, or x.12
    local y_1 = tostring(math.floor(bvg_var.gain * 10))   -- Gain Adjust (0.1 to 3) -- outputs 1.y to 30.y in 1. increment.
    local y_2 = tostring(math.floor(bvg_cfg.washout_thresh * 10)) -- Washout Thresh (0.0 - 0.9) - outputs y.0 to y.9 in .1 increment.
    local z_1 = tostring(math.floor(bvg_var.vignette * 100))  -- Vignette Amount (0.0 to 1.0) outputs 0.z to 100.z in 1. increment.
    local z_2 = tostring(math.floor(bvg_var.glitch_power * 10))       -- Glitch Power (0.0 - 0.9) - outputs z.0 to z.9 in .1 increment.
    local w_1 = tostring((math.floor(bvg_cfg.gain_offset * 10)))  -- Gain Offset (0.5 to 3.0) - outputs 5.w to 30.w in 1. increment.
    local w_2 = tostring(bvg_var.mode)                            -- Mode (0,1) - outputs w.0 or w.1 depending on mode.

    return "(" ..
    x_1 .. "." .. x_2 .. "," .. y_1 .. "." .. y_2 .. "," .. z_1 .. "." .. z_2 .. "," .. w_1 .. "." .. w_2 .. ")"
end

function pack_nvg_data_2()
    local x_1 = tostring(math.floor(bvg_var.flip_down)) -- Flip down amount - outputs 1.x to 100.x
    local x_2 = tostring(0)
    local y_1 = tostring(0)
    local y_2 = tostring(math.floor(bvg_var.vg_radius * 10)) -- Radius for NVG effect - outputs 0.0 to 0.9
    local z_1 = tostring(0)
    local z_2 = tostring(0)
    local w_1 = tostring(0)
    local w_2 = tostring(0)

    return "(" ..
    x_1 .. "." .. x_2 .. "," .. y_1 .. "." .. y_2 .. "," .. z_1 .. "." .. z_2 .. "," .. w_1 .. "." .. w_2 .. ")"
end

function console_update_nvg_shader()
    get_console():execute("r__nightvision " .. bvg_var.generation)
    get_console():execute("shader_param_8 " .. pack_nvg_data())
    get_console():execute("shader_param_7 " .. pack_nvg_data_2())
end

function console_disable_nvg_shader()
    get_console():execute("r__nightvision 0")
    get_console():execute("shader_param_8 (0,0,0,0)")
end

-----------------------------------------------------------------------------
--        NVG TURN ON AND TURN OFF FUNCTIONS, INCL ANIMATION
-----------------------------------------------------------------------------

function check_animation_allowed()
    return (bvg_anim.torch_state == 0 and (not game.only_movekeys_allowed()) and (not IsMoveState("mcClimb")))
end

item_device.set_nightvision = function(section, state)
    if (bvg_cfg.enable_torch_animation and z_beefs_nvgs.play_animation) then
        z_beefs_nvgs.play_animation = false
        set_nightvision_animated(section, state)
        return
    end

    if (not section) then return end

    local effect_id = bvg_ini.try_get_vision_effect_id(section)

    if (effect_id ~= -1) then
        local effect = bvg_mcm.get_vision_effect_table(effect_id)
        bvg_var.generation = effect.generation
        bvg_var.num_tubes = effect.num_tubes
        bvg_var.mode = effect.mode

        if (state and (not item_device.nv_state)) then
            console_update_nvg_shader()
            bvg_sfx.play(bvg_sfx.vision_start_uri)
            item_device.nv_state = true
            set_actor_callback_registered(true)

        elseif ((not state) and item_device.nv_state) then
            console_disable_nvg_shader()
            bvg_var.crt_latch = false
            bvg_var.flip_latch = false
            bvg_var.vignette = 1.0
            bvg_var.flip_down = 1
            bvg_var.vg_radius = 0.5 -- Hack to fix not correctly going back until i am better at this shit
            bvg_sfx.play(bvg_sfx.vision_finish_uri)
            item_device.nv_state = false
            set_actor_callback_registered(false)
        end
    end
end

function set_actor_callback_registered(state)
    if (state) then
        RegisterScriptCallback("actor_on_update", actor_on_update)
        RegisterScriptCallback("actor_on_weapon_zoom_in", actor_on_weapon_zoom_in)
        RegisterScriptCallback("actor_on_weapon_zoom_out", actor_on_weapon_zoom_out)
        RegisterScriptCallback("actor_on_info_callback", actor_on_info_callback)
    else
        UnregisterScriptCallback("actor_on_weapon_zoom_in", actor_on_weapon_zoom_in)
        UnregisterScriptCallback("actor_on_weapon_zoom_out", actor_on_weapon_zoom_out)
        UnregisterScriptCallback("actor_on_info_callback", actor_on_info_callback)
        UnregisterScriptCallback("actor_on_update", actor_on_update)
    end
end

function set_nightvision_animated(section, state)
    if (not section) then return end
    if (bvg_ini.try_get_vision_effect_id(section) == -1) then return end
    if (not check_animation_allowed()) or (not item_device.can_toggle_torch()) then return end
    if (lam2.get_action_with_tag("nvg_animation")) then return end

    bvg_anim.torch_state = 1
    local weapon_zoomed = bvg_util.check_weapon_zoomed() and (not (IsPistol(db.actor:active_item(), nil)) or db.actor:active_detector())
    local det_active = db.actor:active_detector() or nil

    -- If holding weapon and aiming disable ADS.
    if (db.actor:active_item() and (not det_active and weapon_zoomed)) then
        if (get_console():get_bool("wpn_aim_toggle")) then
            level.press_action(bind_to_dik(key_bindings.kWPN_ZOOM))
        else
            level.release_action(bind_to_dik(key_bindings.kWPN_ZOOM))
        end
    end

    if (state) then
        -- Enable NVG.
        lam2.add_action(lam2.get_template_action_wait_for_seconds(0.05))  -- Anim bug? small delay to prevent ctd.
        lam2.add_action(bvg_anim.get_template_action_nvg_enable_start())  -- Enter hand motion.
        lam2.add_action(bvg_anim.get_template_action_nvg_enable(section)) -- Equip nvg motion.
    else
        -- Disable NVG
        lam2.add_action(bvg_anim.get_template_action_nvg_disable_start())  -- Fade in.
        lam2.add_action(bvg_anim.get_template_action_nvg_disable(section)) -- Unequip NVG motion.
        lam2.add_action(lam2.get_template_action_wait_for_seconds(0.05))   -- Anim bug? Small delay to prevent ctd.
        lam2.add_action(bvg_anim.get_template_action_nvg_disable_end())    -- Exit hand motion.
    end
end

function brightness_adjust()
    if ((not item_device.nv_state) or (check_nvg_blocked())) then
        return
    end

    local step_size = (bvg_cfg.gain_max - bvg_cfg.gain_min) / 3
    if (bvg_var.gain_dir and bvg_var.gain <= bvg_cfg.gain_max) then
        bvg_var.gain = bvg_var.gain + step_size
        if (bvg_var.gain >= bvg_cfg.gain_max) then
            bvg_var.gain = bvg_cfg.gain_max
            bvg_var.gain_dir = not bvg_var.gain_dir
        end

    elseif (not bvg_var.gain_dir and bvg_var.gain >= bvg_cfg.gain_min) then
        bvg_var.gain = bvg_var.gain - step_size
        if (bvg_var.gain <= bvg_cfg.gain_min) then
            bvg_var.gain = bvg_cfg.gain_min
            bvg_var.gain_dir = not bvg_var.gain_dir
        end
    end

    bvg_sfx.play(bvg_sfx.brightness_adjust_uri)

    console_update_nvg_shader()
end

-----------------------------------------------------------------------------
--        NVG STATE CHANGE EFFECT, MANIPULATES VIGNETTE AND LOCATION TO
--            SIMUALATE FLIPPING DOWN AND TURNING ON NVGS
-----------------------------------------------------------------------------

function state_change_effect()
    if (not bvg_var.flip_latch and item_device.nv_state) then
        if (bvg_var.flip_down < 100) then
            bvg_var.flip_down = bvg_var.flip_down * bvg_var.flip_speed
        end

        if (bvg_var.flip_down >= 100) then
            bvg_var.flip_down = 100
            bvg_var.flip_latch = true
        end
    end

    if (bvg_var.flip_latch and not bvg_var.crt_latch and item_device.nv_state) then
        if (bvg_var.vignette > bvg_var.vignette_amount) then
            bvg_var.vignette = bvg_var.vignette * (1 / bvg_var.vignette_speed)
        end

        if (bvg_var.vignette <= bvg_var.vignette_amount) then
            bvg_var.vignette = bvg_var.vignette_amount
            bvg_var.crt_latch = true
        end
    end
end

-- NVG glitch effect during blowouts and psy storms.
function set_glitch_power(power)
    if (item_device.nv_state and bvg_var.glitch_power ~= power) then
        bvg_var.glitch_power = power
        if (not check_nvg_blocked()) then
            console_update_nvg_shader()
        end
    end
end

function check_nvg_blocked()
    nvg_blocker_scope = check_active_weapon_restricts_nvg()

    return (nvg_blocker_pda or nvg_blocker_scope)
end

function update_weapon_zoom_in()
    if (not item_device.nv_state) then return end

    local active_scope_restricts_nvg = check_active_weapon_restricts_nvg()

    if (active_scope_restricts_nvg) then
        nvg_blocker_scope = true
        console_disable_nvg_shader()

    elseif (not active_scope_restricts_nvg and nvg_blocker_scope) then
        nvg_blocker_scope = false
        console_update_nvg_shader()

    end
end

function check_active_weapon_restricts_nvg()
    if (bvg_util.check_weapon_zoomed()) then return false end

    if (not bvg_cfg.view_through_scope) then return true end

    local scope_name = bvg_util.try_get_active_scope_name()
    if (not scope_name) then return false end

    if (bvg_cfg.off_when_hv_scope and nvg_heat_scope_names[scope_name]) then
        return true
    end

    if (bvg_cfg.off_when_nv_scope and nvg_night_scope_names[scope_name]) then
        return true
    end

    if (bvg_cfg.off_when_binoc and nvg_binoc_names[scope_name]) then
        return true
    end

    return false
end

-----------------------------------------------------------------------------
--        Callbacks
-----------------------------------------------------------------------------

function on_game_start()
    RegisterScriptCallback("on_option_change", bvg_mcm.fetch_config)

    bvg_mcm.fetch_config()
end

function actor_on_weapon_zoom_in()
    bvg_var.wpn_zoomed_in = true
    wpn_zoom_type = bvg_util.try_get_active_weapon_zoom_type()
    update_weapon_zoom_in()
end

function actor_on_weapon_zoom_out()
    bvg_var.wpn_zoomed_in = false

    if (not item_device.nv_state) then return end

    if (nvg_blocker_scope) then
        nvg_blocker_scope = false
        console_update_nvg_shader()
    end
end

function actor_on_info_callback(npc, info_id)
    local actor = db.actor

    if (actor and item_device.nv_state) then
        if (info_id == "ui_pda" and not bvg_cfg.stays_pda) then
            if (not nvg_blocker_pda) then
                console_disable_nvg_shader()
                nvg_blocker_pda = true
            end
        elseif (info_id == "ui_pda_hide" and not bvg_cfg.stays_pda) then
            if (nvg_blocker_pda) then
                console_update_nvg_shader()
                nvg_blocker_pda = false
            end
        end
    end
end

local tmr = 0
local tmr_step = 200
local wpn_zoom_type = -1

function actor_on_update()
    if ((not bvg_var.crt_latch or not bvg_var.flip_latch) and (item_device.nv_state)) then
        state_change_effect()
        console_update_nvg_shader()
    end

    tg = time_global()
    if tg < tmr then return end
    tmr = tg + tmr_step

    if (bvg_var.wpn_zoomed_in) then
        local new_zoom_type = bvg_util.try_get_active_weapon_zoom_type()
        if (new_zoom_type ~= wpn_zoom_type) then
            wpn_zoom_type = new_zoom_type
            update_weapon_zoom_in()
            end
    end

    if ((not bvg_var.wpn_zoomed_in) and (item_device.nv_state) and (nvg_blocker_scope)) then
        -- check for disable NVG while ADS
        if (nvg_blocker_scope and check_active_weapon_restricts_nvg()) then
            nvg_blocker_scope = false
            console_update_nvg_shader()
        end
    end
end